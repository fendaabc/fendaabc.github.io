<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>芬达里没有泡泡</title>
  
  <subtitle>来杯可乐,不加糖,谢谢</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-11-21T19:29:31.014Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>fenda</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Toots_2020_Nov.22</title>
    <link href="http://example.com/2020/11/22/Toots-2020-Nov-22/"/>
    <id>http://example.com/2020/11/22/Toots-2020-Nov-22/</id>
    <published>2020-11-21T19:28:13.000Z</published>
    <updated>2020-11-21T19:29:31.014Z</updated>
    
    <content type="html"><![CDATA[<ul><li>心里没有了波涛汹涌，只是觉得心里突然空了，我不确定自己能用多少时间把你彻底忘了，也不敢保证我就能真的把你忘了，我只能像现在这样，不吵不闹，不悲不喜，安安静静的与你，再无任何交集。</li></ul><a id="more"></a><ul><li>如果他真的有那么爱你，他会把你介绍进他的生活圈子里，不会连公开的勇气都没有，爱情本应该是一件公开，温暖的事情，何必委屈自己去附和一段不见光的感情，你真正需要的是一个，灯光再亮也会抱住你的人。</li><li>我依旧敢和生活顶撞，敢在逆境里撒野，直面生活的污水，永远乐意为新的一轮月亮和日落欢呼。</li><li>仗义每多屠狗辈，负心多是读书人。</li><li>满眼都是你又怎样，深情专一又如何？最后还不是被辜负？在这个暧昧横行的年代，深情，不过是个笑话</li><li>你低估了我想陪你走下去的决心，而我高估了我在你心里的位置，正如你是我患得患失的梦，而我是你可有可无的，毕竟这穿越山河的剑，刺的都是用情至极的人</li></ul>]]></content>
    
    
    <summary type="html">To the time to life, rather than to life in time.</summary>
    
    
    
    
    <category term="句子" scheme="http://example.com/tags/%E5%8F%A5%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>基于hexo的博客搭建_win10_github</title>
    <link href="http://example.com/2020/11/21/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA_hexo_github_win10/"/>
    <id>http://example.com/2020/11/21/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA_hexo_github_win10/</id>
    <published>2020-11-20T16:00:00.000Z</published>
    <updated>2020-11-21T19:21:36.389Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>因为有一部分我电脑已经有了,所以部分步骤不是很完整~我主要是在自己操作过程中略微记录了一下方便后期参考.如果有问题可以参考一下<a href="https://hexo.io/zh-cn/docs/setup">hexo</a>网站,里面内容也比较完整</p></blockquote><a id="more"></a><h2 id="1-node的安装"><a href="#1-node的安装" class="headerlink" title="1.node的安装"></a>1.node的安装</h2><ol><li><p>下载<a href="http://nodejs.org/">node.js</a></p></li><li><p>直接安装</p></li><li><p>配置系统环境变量–在<code>系统变量</code>中直接在<code>path</code>中添加,直接复制你的安装目录即可.</p><p><img src="https://i.loli.net/2020/11/20/TOtf2oSmxQF5l6N.png" alt="image-20201120223735403"></p></li><li><p>测试是否配置完成,在<code>cmd</code>窗口输入<code>node -v</code>看是否可以正常显示版本,输入<code>npm -v</code>看是否成功显示npm版本,具体的方式百度到处都有.</p></li></ol><h2 id="2-github的注册"><a href="#2-github的注册" class="headerlink" title="2.github的注册"></a>2.github的注册</h2><ol><li><p>注册<a href="">github</a></p></li><li><p>创建一个新的repository,这里注意如果需要使用github pages的话那么名称必须是<code>你的用户名.github.io</code>,这样你配置完之后可以直接通过这个地址访问你的博客.(我的名称如下)</p><p><img src="https://i.loli.net/2020/11/20/lXKPk6RH7oEc89v.png" alt="image-20201120224739138"></p></li><li><p>顺手点击一下,下一步git配置里面要用到这</p><p><code>点右上角头像–settings–SSH and GPG keys</code>准备输入一会的地址</p></li></ol><h2 id="3-win10系统git环境的安装和配置"><a href="#3-win10系统git环境的安装和配置" class="headerlink" title="3.win10系统git环境的安装和配置"></a>3.win10系统git环境的安装和配置</h2><ol><li><p>下载<a href="https://git-scm.com/download/win">git</a>并安装好</p></li><li><p>cmd命令行打开,输入<code>git version</code>看是否显示版本信息,没有显示的话,进入系统环境配置,在path中添加git 的安装目录</p><img src="https://i.loli.net/2020/11/21/ArfYKebXzIuMTWs.png" alt="image-20201121020448803" style="zoom:67%;" /></li><li><p>打开git bash,然后配置用户名和邮箱地址cmd</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">##配置用户名</span><br><span class="line">git config --global user.name &quot;fenda&quot;  </span><br><span class="line">#配置邮箱</span><br><span class="line">git config --global user.email “fenda.abc@gmail.com”</span><br><span class="line">#git push的时候记住用户名和密码</span><br><span class="line">git config --global credential.helper store </span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>如果你之前用过git,那么直接寻找本地的<code>.gitconfig</code>文件看里面你配置的用户名和邮箱地址或者<code>cd ~/. ssh #检查本机已存在的ssh密钥</code></p></li><li><p>如果提示<code>如果提示：No such file or directory</code> 说明你是第一次使用git;输入<code>ssh-keygen -t rsa -C &quot;邮件地址&quot;</code>,然后需要输入保存的位置和设置密码,这里可以不用输入直接连续回车三次也行,最终会生成一个文件在用户目录下，打开用户目录，找到<code>.ssh\id_rsa.pub</code>文件，记事本打开并复制里面的内容，打开你的github主页，进入<code>个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：</code>将刚复制的内容粘贴到key那里，title随便填，保存。如下图所示</p><img src="https://i.loli.net/2020/11/20/Min4AHDOJSumRKV.png" alt="image-20201120225731648" style="zoom:50%;" /></li><li><p>测试是否可以使用:在git bash中输入<code>ssh -T git@github.com</code>  注意邮箱地址不用改,直接复制即可,看是否如果提示<code>Are you sure you want to continue connecting (yes/no)?</code>，输入yes，然后会看到：</p><blockquote><p>Hi abcdefc! You’ve successfully authenticated, but GitHub does not provide shell access.</p></blockquote><p>看到这个信息key添加完成</p></li><li><p>然后配置ssh,</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh #进入ssh目录</span><br><span class="line">sudo touch config #新建ssh的配置文件</span><br><span class="line">sudo gedit config #修改ssh的配置文件</span><br><span class="line">sudo chmod <span class="number">600</span> config #添加权限</span><br></pre></td></tr></table></figure><p><strong>config</strong>文件的内容：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Host github.com  </span><br><span class="line">User 你的注册邮箱 </span><br><span class="line">Hostname ssh.github.com  </span><br><span class="line">PreferredAuthentications publickey  </span><br><span class="line">IdentityFile ~/.ssh/id_rsa  </span><br><span class="line">Port <span class="number">443</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ssh git@github.com</span><br></pre></td></tr></table></figure><p>如果看到下图,说明SSH已配置成功！</p><p><img src="https://i.loli.net/2020/11/21/c2GxYlBhIEyH8Dt.png" alt="image-20201121032150442"></p></li></ol><h2 id="4-hexo的安装"><a href="#4-hexo的安装" class="headerlink" title="4.hexo的安装"></a>4.hexo的安装</h2><blockquote><p>这一步可以在安装node.js的时候一块安装了</p></blockquote><ol><li><p>打开命令行窗口输入:<code>npm install -g hexo-cli</code>,等待命令执行完成,默认安装在nodejs的目录里面,然后需要到系统环境变量中配置环境,确保cmd窗格能直接识别命令,我这里等待的时间比较久(网友好多直接用cnpm安装的,可能会快点,可以借鉴)</p></li><li><p>用cd命令切换到你需要保存blog的位置,例如我的在<code>D:\Documents\blog</code>,我直接切换到<code>D:\Documents</code>,然后执行<code>hexo init blog #(这个blog是我博客的文件夹名,你可以用你自己的)</code>,这里也等待的比较长的时间</p></li><li><p>然后<code>cd blog</code>,进入blog目录</p></li><li><p>执行<code>npm install</code>,执行完成后的目录如下,可以用ls查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure></li><li><p>这些目录的具体说明在hexo网站有,其中</p><ol><li><code>source</code>中的<code>_posts</code>中是已经保存的Markdown文件保存的地方,</li><li><code>themes</code>中是主题,默认已经有了一个,我后面会切换一个</li><li><code>_config.yml</code>是配置文件,详细的信息建议看<a href="https://hexo.io/zh-cn/docs/configuration">官网</a>,你博客的名字,使用的语言,时区,以及最后上传到github的位置都是在这里面进行配置的…….现在可以先不看,一会只修改一下github相关的东西和主题即可,剩下的东西后面再慢慢研究,其实我现在也是半斤八两,不过边学边卖吗,不懂就查~~</li></ol></li><li><p>回到git bash中,</p><ol><li><p>使用<code>hexo g</code>,将_post文件夹中已经有的md文件进行渲染,</p></li><li><p>使用<code>hexo s</code>,启动hexo博客的本地服务器,可以看到提示的本地访问地址,复制到浏览器访问<code>http://localhost:4000</code>,执行命令如下</p><img src="https://i.loli.net/2020/11/20/u4Rc6JULbo1dBWn.png" alt="image-20201120232225288" style="zoom:80%;" /><p>网页效果图如下:</p><img src="https://i.loli.net/2020/11/20/KDExGhbkXFzg7aw.png" alt="image-20201120233407339" style="zoom:67%;" /></li><li><p>使用<code>hexo clear</code>,可以将缓存进行清除</p></li><li><p>使用<code>hexo g -d</code>执行生成和上传github的命令,</p><ol><li><p><code>注意</code>需要确保首先github上面已经创建了repository,公开的(如果私有的话使用github pages需要付费),且命名符合上面注册时候我写的命名规则,</p></li><li><p><code>注意</code>已经安装配置了本地的git环境</p></li><li><p><code>注意</code>上传github需要先安装相关插件,在blog目录下执行<code>npm install hexo-deployer-git --save</code>,这里有可能报错,提示权限不足等等,可以重新使用管理员权限切换到相应目录然后执行上面的命令</p></li><li><p><code>注意</code>已经配置了本地<code>_config.yml</code>中的git相关设置,如下图所示</p><img src="https://i.loli.net/2020/11/21/nzBMQr1Zkc8iNHF.png" alt="image-20201121032614470" style="zoom:80%;" /></li><li><p>第一次执行<code>hexo g -d</code>命令会提示输入github用户名和密码~</p></li><li><p>执行<code>hexo g -d</code>命令,执行完效果如下</p><img src="https://i.loli.net/2020/11/20/FiA1rnHQ4Xc35dM.png" alt="image-20201120234305198" style="zoom:80%;" /></li><li><p>浏览器直接访问<code>你的用户名.github.io</code>,我的是<code>https://fendaabc.github.io/</code>,效果如下(我这在<code>_config.yml</code>中修改了一部分的页面信息,下面会放的)</p><p><img src="https://i.loli.net/2020/11/20/Wq5LK2YnmykvU9c.png" alt="image-20201120234627496"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">芬达里没有泡泡</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">来杯可乐,不加糖</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">芬达</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></span><br></pre></td></tr></table></figure></li><li><p>到这里其实最基本的功能已经完成了,本地生成的markdown文件已经可以在浏览器进行显示了</p></li></ol></li></ol></li></ol><h2 id="5-常规的操作步骤"><a href="#5-常规的操作步骤" class="headerlink" title="5.常规的操作步骤"></a>5.常规的操作步骤</h2><ol><li>其实已经可以基本使用联网版本的个人博客了,剩下的功能就留给我们慢慢探索了</li><li>常规使用方法<ol><li>git bash进入blog目录,然后<code>hexo n 博客名字</code>,生成新博客,然后打开在里面可以直接进行编辑,默认生成已经有了时间和标题,格式相对完整</li><li>写完以后,<code>hexo g</code>生成html文件,<code>hexo s</code>本地服务打开进行预览</li><li>不预览的话直接<code>hexo g -d</code>生成并上传</li><li>为了避免默认主题上传后全文展示,可以在合适的地方使用<code>&lt;!--more--&gt;</code>,将前面部分作为摘要展示,后面部分需要点开全文进行展示…………..但这块应该可以通过别的主题直接进行实现,而且默认主题并不是很好看</li></ol></li><li>但是现在还存在一些问题,第三方的主题上传github后显示效果和本地不一样,域名解析还存在一定问题,还得修改一下</li></ol><h2 id="6-第三方主题maupassant的安装"><a href="#6-第三方主题maupassant的安装" class="headerlink" title="6.第三方主题maupassant的安装"></a>6.第三方主题<strong>maupassant</strong>的安装</h2><blockquote><p>我使用的主题名字是<strong>maupassant</strong>,<a href="https://www.haomwei.com/technology/maupassant-hexo.html">安装步骤页面</a>和<a href="https://github.com/tufu9441/maupassant-hexo">github页面</a>,效果图如下</p><img src="https://i.loli.net/2020/11/21/whaLIOoPkxteRVD.png" alt="image-20201121000028938" style="zoom:50%;" /></blockquote><ol><li><p>命令行切换到blog目录,然后输入一下命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant  </span><br><span class="line">npm install hexo-renderer-pug --save  #会提示用管理员权限运行</span><br><span class="line">npm install hexo-renderer-sass --save  </span><br></pre></td></tr></table></figure></li><li><p>编辑Hexo目录下的 <code>_config.yml</code>，将<code>theme</code>的值改为<code>maupassant</code>。</p></li><li><p>确保刚刚pull的theme是在blog的根目录,并且maupassant和landscape在同一个文件夹中</p></li><li><p>执行<code>hexo clear</code>清理缓存,然后<code>hexo g</code>重新生成 ,再<code>hexo s</code>打开本地服务,通过浏览器查看<code>http://localhost:4000</code>是否已经成功启用新版主题.如下图</p></li></ol><img src="https://i.loli.net/2020/11/21/3EUrVw1KYRgyiCG.png" alt="image-20201121005907303" style="zoom:67%;" /> 5. 执行`hexo d`,将改变后的文件进行上传,访问就好<ol start="6"><li><p><code>注意</code>:使用后发现网页乱码,无法渲染,找到解决办法是—–将本地blog目录下的``_config.yml<code>文件中的</code>per_page:20<code>改成</code>5`或者更小就正常加载了,如下:</p><img src="https://i.loli.net/2020/11/21/zMtvwxZnHiEmNu1.png" alt="image-20201121173025899" style="zoom:67%;" /></li></ol><h2 id="6-第三方主题light安装"><a href="#6-第三方主题light安装" class="headerlink" title="6.第三方主题light安装"></a>6.第三方主题light安装</h2><blockquote><p>项目地址:<a href="https://github.com/hexojs/hexo-theme-light">https://github.com/hexojs/hexo-theme-light</a></p></blockquote><ol><li>安装<code>git clone --depth 1 https://github.com/hexojs/hexo-theme-light themes/light</code></li><li></li></ol><h2 id="7-绑定个人域名"><a href="#7-绑定个人域名" class="headerlink" title="7.绑定个人域名"></a>7.绑定个人域名</h2><ol><li><p>可以在阿里云里购买自己喜欢的<a href="https://wanwang.aliyun.com/">域名</a></p></li><li><p>购买完之后到控制台添加域名解析地址<img src="https://i.loli.net/2020/11/21/aoDOhCINxgZmWAF.png" alt="image-20201121011942199" style="zoom:50%;" /></p><ol><li><strong>A记录</strong>:用本地cmd ping一下自己的<code>用户名.github.io</code>,会得到一个IPV4的地址,将这个地址填写到记录值</li><li>CNAME记录:主机记录是www,记录值是<code>用户名.github.io</code>,</li><li>剩下应该还有一些,但我还搞不懂,就没弄</li><li>会到github页面,点开你的blog的repository,进入setting,找到GitHub Pages,然后在下面写上你购买的域名<img src="https://i.loli.net/2020/11/21/3JgrIkYClVEcfB6.png" alt="image-20201121014244889" style="zoom:67%;" /></li><li>通过个人域名直接在浏览器进行博客访问.</li><li><code>注意</code>:使用了几次发现这里绑定的域名会自动消失,然后导致访问域名解析不到地址,解决办法是在本地blog<code>\source</code>目录下新建<code>CNAME</code>文件,里面写上你购买的域名,例如我的<code>fenda.info</code>,这样就解决了域名消失的问题,原理不懂,但目前是这样解决的~</li></ol></li></ol><h2 id="8-其他美化相关"><a href="#8-其他美化相关" class="headerlink" title="8.其他美化相关"></a>8.其他美化相关</h2><blockquote><ul><li><input checked="" disabled="" type="checkbox"> 网页左上角小logo</li><li><input checked="" disabled="" type="checkbox"> 标签栏 例如:java  doc Android等的显示</li><li><input checked="" disabled="" type="checkbox"> 谷歌搜索实现</li><li><input checked="" disabled="" type="checkbox"> 本地搜索功能实现,搜索已经存在的文档</li><li><input disabled="" type="checkbox"> 文档页面的美化,统一前端页面,所有的文档尽量除了标题和描述信息以外其他都不展示,避免页面混乱–</li><li><input checked="" disabled="" type="checkbox"> 友情链接</li><li><input checked="" disabled="" type="checkbox"> 文章初始化时候_日期时间标签等的在哪设置:<a href="https://hexo.io/zh-cn/docs/front-matter">https://hexo.io/zh-cn/docs/front-matter</a></li><li><input disabled="" type="checkbox"> 文章代码块样式的美化:<a href="https://hexo.io/zh-cn/docs/tag-plugins">https://hexo.io/zh-cn/docs/tag-plugins</a>  </li></ul></blockquote><h3 id="1-网页左上角小logo的添加"><a href="#1-网页左上角小logo的添加" class="headerlink" title="1. 网页左上角小logo的添加"></a>1. 网页左上角小logo的添加</h3><p>制作一个你需要的logo,命名为<code>favicon.ico</code>,放在<code>\source</code>目录下,然后重新生成以后就好了</p><p><img src="https://i.loli.net/2020/11/21/gjXmZFHLGazQwYh.png" alt="image-20201121172231087"></p><h3 id="2-标签栏设置"><a href="#2-标签栏设置" class="headerlink" title="2. 标签栏设置"></a>2. 标签栏设置</h3><blockquote><p>操作在Markdown文档所在目录执行,即<code>blog\source\_posts</code>目录</p></blockquote><ol><li><h4 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h4></li></ol>]]></content>
    
    
    <summary type="html">To the time to life, rather than to life in time.</summary>
    
    
    
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
    <category term="博客" scheme="http://example.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="教程" scheme="http://example.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>橙狐使用教程完善版</title>
    <link href="http://example.com/2020/11/20/%E6%A9%99%E7%8B%90%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8BforMI9/"/>
    <id>http://example.com/2020/11/20/%E6%A9%99%E7%8B%90%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8BforMI9/</id>
    <published>2020-11-19T16:00:00.000Z</published>
    <updated>2020-11-21T19:15:27.978Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.coolapk.com/feed/19982456?shareKey=MjE5MmYxZGYxMTcwNWZiNzZkYzE~&shareUid=2110930&shareFrom=com.coolapk.market_10.2.1">橙狐使用教程完善版</a></p><p>橙狐是一个基于twrp源码开发的第三方rec，功能比twrp强大，鉴于上次的橙狐图文我写的不是很清楚加上最近橙狐又更新了官网，所以打算重写一下哼唧</p><a id="more"></a><p>本图文分为以下几部分<br>1、下载<br>2、刷入<br>3、ota（仅miui和魅族M2，一个机型也算支持flyme的ota流汗滑稽）<br>4、橙狐的优点和补充说明</p><p>1、下载<br>首先是橙狐官网： <a href="https://orangefox.download/zh-CN">查看链接</a></p><img src="https://raw.githubusercontent.com/fendaabc/for-picgo/master/3075032_ce144266_9784_6052%25401080x2340.jpeg.m.jpg" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/fendaabc/for-picgo/master/3075032_71ddb2c8_9784_6054%25401080x2340.jpeg.m.jpg" style="zoom:50%;" /><p>或者<a href="https://www.coolapk.com/u/KHwang9883">@KHwang9883</a> 看这位老哥的动态，他的<a href="https://github.com/KHwang9883/MobileModels/blob/master/brands/xiaomi.md">github</a> ，有全部小米机型的代号</p><p>因为橙狐官网部分用的小米国际版的机型名字，典型的例子是k20在橙狐官网没有对应机型但是小米9T其实就是k20（类似的例子还有小米A3和小米cc9）</p><p>实在找不到的看我这篇动态：<a href="https://www.coolapk.com/feed/19341940?shareKey=NjRlMTk0ZDBkZmM0NWYwMDI2N2U~&shareUid=3075032&shareFrom=com.coolapk.market_10.4-beta3">查看链接</a><br>蓝奏云 <a href="https://wushidi.lanzous.com/b00nnbn8j">查看链接</a><br>能不能用不能保证（似乎除了小米9pro的不能用以外别的问题不大？<img src="http://static.coolapk.com/emoticons/v9/coolapk_emotion_59_erha.png" alt="二哈">）没有的告诉我我去搜搜看有没有</p><p>2、刷入<br>官方版本的橙狐只需要在twrp内正常刷入，这也是最推荐的方法，刷完会自动重启rec进入橙狐</p><p>假如你没有twrp或者不想刷twrp的，可以采用两个办法<br>1、手机有root<br>解压卡刷包并提取recovery.img镜像的方法，用镜像助手 <a href="https://wushidi.lanzous.com/icz9xhg">查看链接</a>授予root权限刷入rec，刷完之后会提示重启到rec，请立即重启，防止被覆盖<img src="http://static.coolapk.com/emoticons/v9/coolapk_emotion_57_dogehechi.png" alt="doge呵斥"><br>2、手机无root<br>解压卡刷包到电脑并提取recovery.img镜像，使用adb命令在fastboot刷入，或者秋之盒 <a href="https://atmb.top/">查看链接</a> 刷入rec，然后手动重启到rec</p><p>以上两种方法都不推荐，因为按照官方说法，这样会导致部分橙狐的插件用不了  </p><p>假如是非官方版本，部分非官方的开发者会提供卡刷包，按照上面说的方法刷就行，而部分开发者只提供了img镜像，这时候你只能通过上面说的镜像助手或者秋之盒刷了<img src="http://static.coolapk.com/emoticons/v9/coolapk_emotion_33_wulian.png" alt="捂脸">  </p><p>部分人橙狐进去之后默认是英文，需要手动调语言为中文，可以看这张图</p><img src="https://raw.githubusercontent.com/fendaabc/for-picgo/master/3075032_55aae738_9784_6056%25401956x4238.png.m.jpg" style="zoom:50%;" /><p>然后点进去切成chinese simplified就是简体中文了</p><img src="https://raw.githubusercontent.com/fendaabc/for-picgo/master/3075032_71dabd1f_9784_6058%25401080x2340.jpeg.m.jpg" style="zoom:50%;" /><p>部分橙狐进去之前会有这样的界面</p><img src="https://raw.githubusercontent.com/fendaabc/for-picgo/master/3075032_58382591_9784_6059%25402068x4009.jpeg.m.jpg" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/fendaabc/for-picgo/master/3075032_3d67d0a9_9784_6061%2540603x1255.jpeg.m.jpg" style="zoom:50%;" /><p>打勾滑动即可，不会清除数据  </p><p>橙狐界面预览</p><img src="https://raw.githubusercontent.com/fendaabc/for-picgo/master/3075032_fa4aa222_9784_6063%25401080x2340.jpeg.m.jpg" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/fendaabc/for-picgo/master/3075032_1f5c1ef8_9784_6065%25401080x2340.jpeg.m.jpg" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/fendaabc/for-picgo/master/3075032_f54f72d5_9784_6066%25401080x2340.jpeg.m.jpg" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/fendaabc/for-picgo/master/3075032_8d639372_6108_647%25401080x2340.jpeg.m.jpg" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/fendaabc/for-picgo/master/3075032_d3ccb0e6_6108_6472%25401080x2340.jpeg.m.jpg" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/fendaabc/for-picgo/master/3075032_b42de263_9789_2623%25401080x2340.jpeg.m.jpg" style="zoom:50%;" /><p>其中magisk manager有点类似残血版mm管理器（没有模块备份功能），假如检测出你没有刷magisk会提示你是否刷入</p><img src="https://raw.githubusercontent.com/fendaabc/for-picgo/master/3075032_175027fa_9789_2625%25401080x2340.jpeg.m.jpg" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/fendaabc/for-picgo/master/3075032_f8d5380a_9789_2627%25401080x2340.jpeg.m.jpg" style="zoom:50%;" /><p>橙狐格式化data在菜单-分区管理-data-格式化data</p><img src="https://raw.githubusercontent.com/fendaabc/for-picgo/master/3075032_9f463290_9789_2629%25401080x2340.jpeg.m.jpg" style="zoom:50%;" /><p>3、ota功能<br>官网的教程 <a href="https://wiki.orangefox.tech/en/guides/ota">查看链接</a><br>由于魅族只有一个m2，就不谈魅族了，方法应该一样<img src="http://static.coolapk.com/emoticons/v9/coolapk_emotion_63_liuhanhuaji.png" alt="流汗滑稽"><br>对于miui，你需要下载当前系统完整包（一定要是当前系统或者更加新的系统），获取途径推荐采用 <a href="http://www.coolapk.com/apk/cn.iqianye.miui.update" title="MIUI 完整包获取">【MIUI 完整包获取】</a> 获取后把链接复制到浏览器下载<br>当然直接下也可以，在系统更新界面下载完整包，等待进度条动了，点下进度条，停止下载，然后进下载管理里继续下载（这一步是为了防止包被miui解密），假如你不知道下载管理在哪那可以去自带浏览器的下载也一样  </p><p>现在你已经获得了miui完整包，使用 <a href="http://www.coolapk.com/apk/cn.iqianye.miui.update" title="MIUI 完整包获取">【MIUI 完整包获取】</a> 获取的完整包应该在sdcard/download文件夹下，系统更新下载的在sdcard/miui_rom 文件夹下（假如没有改过默认设置），然后确认手机里有你当前的面具版本对应的面具包，没有的去github下 <a href="https://github.com/topjohnwu/Magisk/releases">查看链接</a><br>，当然假如你还没有root的最好也准备一下面具包  </p><p>现在重启到rec，选择菜单-右上角设置-miui ota，打开开关，除了禁用dm检验以外全部打勾（官方文档是这么说的，虽然我小米9开了禁用dm好像没事？还是建议关了<img src="http://static.coolapk.com/emoticons/v9/coolapk_emotion_1020_biaomiankaixin.png" alt="表面开心">），然后回到主页，选择并刷入miui完整包，路径上文提到了,一般橙狐默认是主目录，即download文件夹或者miui_rom文件夹，刷机包检验和自动重启不勾选（保持默认），刷完包，不要重启，马上找到刚刚准备的面具包刷下（防止橙狐和面具被覆盖，有没有root都需要），然后进ota界面就可以看到，您已准备好接受更新</p><img src="https://raw.githubusercontent.com/fendaabc/for-picgo/master/3075032_b585ab79_9789_2631%25401080x2340.jpeg.m.jpg" style="zoom:50%;" />]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.coolapk.com/feed/19982456?shareKey=MjE5MmYxZGYxMTcwNWZiNzZkYzE~&amp;shareUid=2110930&amp;shareFrom=com.coolapk.market_10.2.1&quot;&gt;橙狐使用教程完善版&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;橙狐是一个基于twrp源码开发的第三方rec，功能比twrp强大，鉴于上次的橙狐图文我写的不是很清楚加上最近橙狐又更新了官网，所以打算重写一下哼唧&lt;/p&gt;</summary>
    
    
    
    
    <category term="教程" scheme="http://example.com/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="安卓" scheme="http://example.com/tags/%E5%AE%89%E5%8D%93/"/>
    
    <category term="橙狐" scheme="http://example.com/tags/%E6%A9%99%E7%8B%90/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2020/11/19/hello-world/"/>
    <id>http://example.com/2020/11/19/hello-world/</id>
    <published>2020-11-18T16:00:00.000Z</published>
    <updated>2020-11-21T19:07:17.149Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
    <category term="md" scheme="http://example.com/tags/md/"/>
    
  </entry>
  
</feed>
